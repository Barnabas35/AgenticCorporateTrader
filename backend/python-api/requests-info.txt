
The following are requests that can be made to the API.
Each entry includes the url, the method, and the parameters that can be passed to the API as well as the expected response.

### Get random number (DEBUG) ---------------------------
URL & Method: GET /random-number
Response: JSON - A random integer number between 0 and 1000
Example:
{
  "random_number": 123
}


### Get number of users (DEBUG) -------------------------
URL & Method: GET /user-count
Response: JSON - The number of users in the database
Example:
{
  "user_count": 123
}


### Login user ------------------------------------------
URL & Method: POST /login
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "email": "string",
  "password": "string"
}
Response: JSON - Session token and status message
Example:
{
  "session_token": "yh1vtDb71lexRhXJJW2gnQhzv",
  "status": "Success"
}


### Register user ---------------------------------------
URL & Method: POST /register
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "username": "string",
  "password": "string",
  "email": "string",
  "user_type": "string"
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Get username ----------------------------------------
URL & Method: POST /get-username
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"
}
Response: JSON - Username and status message
Example:
{
  "username": "string",
  "status": "Success"
}


### Get email -------------------------------------------
URL & Method: POST /get-email
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"
}
Response: JSON - Email and status message
Example:
{
  "email": "string",
  "status": "Success"
}


### Get user profile icon url ---------------------------
URL & Method: POST /get-profile-icon
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"
}
Response: JSON - Profile icon url and status message
Example:
{
  "url": "string",
  "status": "Success"
}
INFO: Image is 256x256 pixels.
WARNING: The profile icon url expires after 3 minutes. Already loaded images will not be affected.
WARNING: Maximum 5000 requests per day before limit is reached. Download the image where possible.


### Add client ------------------------------------------
URL & Method: POST /add-client
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
  "client_name": "string",
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Get client list -------------------------------------
URL & Method: POST /get-client-list
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"
}
Response: JSON - List of clients and status message
Example 1 (when fm):
{
  "clients": [
    {"client_name": "client1", "client_id": "AgSO2FnIP46FA"},
    {"client_name": "client2", "client_id": "AgSO2FnIP46FB"}
  ],
  "status": "Success"
}
Example 2 (when fa):
{
  "clients": [{"client_name": "Fund Administrator", "client_id": "AgSO2FnIP46FA"}],   // If user type is "fa" then the user id is returned
  "status": "Success"                                                                 // This user id should be used as client id in other requests
}


### Remove client ---------------------------------------
URL & Method: POST /remove-client
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
  "client_name": "string"
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Submit support ticket -------------------------------
URL & Method: POST /submit-support-ticket
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
  "issue_description": "string",
  "issue_subject": "string"
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Get support ticket list -----------------------------
URL & Method: POST /get-support-ticket-list
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"         // User session token of an admin
}
Response: JSON - List of support tickets and status message
Example:
{
  "support_tickets": [
    {"issue_subject": "subject1",
     "user_id": "AgSO2FnIP46FA",
     "issue_description": "description1",
     "issue_status": "open",
     "ticket_id": "AgSO2FnIP46FA",
     "unix_timestamp": 1234567890},

    {"issue_subject": "subject2",
     "user_id": "AgSO2FnIP46FB",
     "issue_description": "description2",
     "issue_status": "resolved",
     "ticket_id": "AgSO2FnIP46FB",
     "unix_timestamp": 1234567890}
  ],
  "status": "Success"
}


### Resolve support ticket ------------------------------
URL & Method: POST /resolve-support-ticket
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",        // User session token of an admin
  "ticket_id": "string"
  "response_subject": "string",     // Email subject
  "response_body": "string"         // Email body
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Submit review ---------------------------------------
URL & Method: POST /submit-review
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
  "review_score": "integer",        // 1 to 5
  "review_comment": "string"
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Get review list -------------------------------------
URL & Method: POST /get-review-list
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"        // User session token of an admin
}
Response: JSON - List of reviews and status message
Example:
{
  "reviews": [
    {"score": 5,
     "comment": "comment1",
     "user_id": "AgSO2FnIP46FA"},

    {"score": 3,
     "comment": "comment2",
     "user_id": "AgSO2FnIP46FB"}
  ],
  "status": "Success"
}


### Get top stocks --------------------------------------
URL & Method: GET /get-top-stocks
Parameters:
 - limit: integer (optional) - Number of top stocks to return (default 10)
Response: JSON - List of top stocks
Example:
{
  "ticker_details": [
    {"symbol": "AAPL", "company_name": "Apple Inc.", "price": 123.45, "currency": "usd"},
    {"symbol": "GOOGL", "company_name": "Google Inc.", "price": 678.90, "currency": "usd"}
  ],
  "status": "Success"
}


### Search stock markets --------------------------------
URL & Method: POST /text-search-stock
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "search_query": "string",
  "limit": "integer",        // Number of results to return (default 5, min 1, max 50)
  "session_token": "string",
  "show_price": "boolean"    // Show price in results (default false, true takes twice as long)
}
Response: JSON - List of tickers
Example:
{
  "ticker_details": [
    {"symbol": "AAPL", "company_name": "Apple Inc.", "price": 123.45, "currency": "usd"},
    {"symbol": "GOOGL", "company_name": "Google Inc.", "price": 678.90, "currency": "usd"}
  ],
  "status": "Success"
}


### Get user type ---------------------------------------
URL & Method: POST /get-user-type
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"
}
Response: JSON - User type and status message
Example:
{
  "user_type": "string",        // "admin" or "fa" or "fm"
  "status": "Success"
}


### Delete user -----------------------------------------
URL & Method: POST /delete-user
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Get ticker info -------------------------------------
URL & Method: POST /get-ticker-info
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "ticker": "string",
  "session_token": "string"
}
Response: JSON - Ticker info and status message
Example:
{
    "status": "Success",
    "ticker_info": {
        "change_percentage": -0.3467523680649498,
        "close_price": 235.86,
        "company_description": "Apple is among the largest companies in the world...",
        "company_name": "Apple Inc.",
        "currency": "usd",
        "employee_count": 161000,
        "high_price": 236.22,
        "homepage": "https://www.apple.com",
        "low_price": 232.6,
        "open_price": 233.885,
        "symbol": "AAPL",
        "volume": 33278632.0
    }
}


### Get ticker aggregates -------------------------------
URL & Method: POST /get-ticker-aggregates
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "ticker": "string",
  "session_token": "string",
  "start_date": "string",           // Format: "YYYY-MM-DD"
  "end_date": "string"              // Format: "YYYY-MM-DD"
  "interval": "string"              // "hour", "day", "week", "month" (level of detail)
  "limit": "integer"                // Number of data points to return (default 100, min 10, max 1000)
}
Response: JSON - List of aggregates
Example:
{
  "aggregates": [                   // Most recent data first
        {
            "v": 8700,              // Volume
            "vw": 236.0925,         // Volume weighted average price
            "o": 236.12,            // Open price
            "c": 236.0801,          // Close price
            "h": 236.12,            // High price
            "l": 236.05,            // Low price
            "t": 1729626870000,     // Unix timestamp
            "n": 145                // Number of trades
        },
        {
            "v": 4298,
            "vw": 236.1067,
            "o": 236.095,
            "c": 236.1201,
            "h": 236.1201,
            "l": 236.095,
            "t": 1729626869000,
            "n": 53
        },
        {
            "v": 285,
            "vw": 236.058,
            "o": 236.095,
            "c": 236.095,
            "h": 236.095,
            "l": 236.095,
            "t": 1729626868000,
            "n": 11
        },
        {
            "v": 760,
            "vw": 236.0928,
            "o": 236.09,
            "c": 236.1,
            "h": 236.1,
            "l": 236.09,
            "t": 1729626867000,
            "n": 21
        }
  ],
  "status": "Success"
}


### Logout user -----------------------------------------
URL & Method: POST /logout
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Text search crypto ----------------------------------
URL & Method: POST /text-search-crypto
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "search_query": "string",
  "limit": "integer",        // Number of results to return (default 5, min 1, max 50)
  "session_token": "string",
  "show_price": "boolean"    // Show price in results (default false, true takes twice as long)
}
Response: JSON - List of tickers
Example:
{
  "ticker_details": [
    {"symbol": "BTC", "name": "Bitcoin", "price": 12345.67},
    {"symbol": "ETH", "name": "Ethereum", "price": 890.12}
  ],
  "status": "Success"
}
INFO: Prices are in USD.
WARNING: When show_price is true, some cryptos may not show up due to them not being supported by yfinance.


### Get top cryptos -------------------------------------
URL & Method: GET /get-top-cryptos?limit=10
Parameters:
 - limit: integer (optional) - Number of top cryptos to return (default 10)
Response: JSON - List of top cryptos
Example:
{
  "ticker_details": [
    {"symbol": "BTC", "name": "Bitcoin", "price": 12345.67},
    {"symbol": "ETH", "name": "Ethereum", "price": 890.12}
  ],
  "status": "Success"
}
INFO: Prices are in USD.


### Get crypto info -------------------------------------
URL & Method: POST /get-crypto-info
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "crypto": "string",
  "session_token": "string"
}
Response: JSON - Crypto info and status message
Example:
{
    "crypto_info": {
        "description": "Bitcoin (BTC) is a cryptocurrency launched in 2010. Users are able to generate BTC through...",
        "high": 68873.016,
        "latest_price": 68899.84375,
        "low": 68261.336,
        "name": "Bitcoin",
        "open": 68746.79,
        "previous_close": 68746.79,
        "symbol": "BTC",
        "volume": 36003250176
    },
    "status": "Success"
}


### Get crypto aggregates -------------------------------
URL & Method: POST /get-crypto-aggregates
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "crypto": "string",               // Crypto symbol "BTC"
  "session_token": "string",
  "start_date": "string",           // Format: "YYYY-MM-DD"
  "end_date": "string"              // Format: "YYYY-MM-DD"
  "interval": "string"              // Level of detail example: "1d"
}
Response: JSON - List of aggregates
Example:
{
    "crypto_aggregates": [
        {
            "close": 70215.1875,            // Close price
            "date": "2024-10-31 00:00:00",  // Date and time
            "high": 72662.3125,             // High price
            "low": 69590.5,                 // Low price
            "open": 72335.046875,           // Open price
            "volume": 40627912076.0         // Volume
        },
        {
            "close": 72339.5390625,
            "date": "2024-10-30 00:00:00",
            "high": 72905.296875,
            "low": 71411.734375,
            "open": 72715.3671875,
            "volume": 40646637831.0
        },
        {
            "close": 72720.4921875,
            "date": "2024-10-29 00:00:00",
            "high": 73577.2109375,
            "low": 69729.9140625,
            "open": 69910.046875,
            "volume": 58541874402.0
        }
    ],
    "status": "Success"
}


# Get balance -----------------------------------------
URL & Method: POST /get-balance
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"
}
Response: JSON - Balance and status message
Example:
{
  "balance": 123.45,       // Balance in USD
  "status": "Success"
}


### Get user list as admin ------------------------------
URL & Method: POST /get-user-list
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"
}
Response: JSON - List of users and status message
Example:
{
    "status": "Success",
    "user_list": [
        {
            "email": "milosz@gmail.com",
            "id": "1W0lH5oMGPsGBvG0A",
            "password": "96cae35c8a9b24418bf24966c2c1b8385723a9a6b8358cddca0a1e",
            "session_token": "",
            "user_type": "fm",
            "username": "Milosz"
        },
        {
            "email": "kbooks1@gmail.com",
            "id": "9e8YODxoCKswYH0DW",
            "password": "091e6bb938c4e6925b1b927682b8bbeaad44109889b6c38dea54a49ee4",
            "session_token": "hRAiBp69AeU0POanxvrlNw3LV69BlWfhAsxKf6xFAi1mDiv5vfJBHh0ZlO6M",
            "user_type": "fa",
            "username": "kbooks1"
        },
        {
            "email": "user2@gmail.com",
            "id": "E6xQPxkSI4Znq61Vb",
            "password": "6025d1fe48abd4168528f18a2e265dd98d41a7084aa09f6141703901a3",
            "session_token": "VJSawERPfifve3Lk36Mm141jZqY2zLmpa9zoRqpGxxph2QZp0n8i1RUWKZBG",
            "user_type": "fa",
            "username": "user2"
        },
        {
            "email": "menel@gmail.com",
            "id": "H3Ek22fwlQcic7kpV",
            "password": "c5b6783c56b7662e2d3d64220e69a2c356c21f173d7926762ccda643d6",
            "session_token": "TOTpcEM8LFzaSJs7VI0dxt1KOOCqyM35VaedV3iVTUeGRvelsSCRLloXm8SU",
            "user_type": "fa",
            "username": "menel"
        }
    ]
}


### Admin delete user -----------------------------------
URL & Method: POST /admin-delete-user
{
  "session_token": "string",        // User session token of an admin
  "id": "string"                    // User ID
}
Example:
{
  "status": "Success"
}


### Add balance -----------------------------------------
URL & Method: POST /add-balance
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
  "usd_quantity": 123.45        // Amount to add in USD
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Purchase asset --------------------------------------
URL & Method: POST /purchase-asset
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
  "usd_quantity": "float",       // Amount to purchase in USD
  "market": "string"             // "stocks" or "crypto"
  "ticker": "string"             // Ticker symbol with no -USD suffix
  "client_id": "string"          // Client id (or user id for "fa" user type)
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Get user assets -------------------------------------
URL & Method: POST /get-user-assets
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string"
  "client_id": "string"          // Client id (or user id for "fa" user type)
  "market": "string"             // "stocks" or "crypto"
}
Response: JSON - List of assets and status message
Example:
{
    "status": "Success",
    "ticker_symbols": [
        "ETH",
        "BTC"
    ]
}


### Get asset -------------------------------------------
URL & Method: POST /get-asset
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
  "market": "string",            // "stocks" or "crypto"
  "ticker": "string".            // Ticker symbol with no -USD suffix
  "client_id": "string"          // Client id (or user id for "fa" user type)
}
Response: JSON - Asset info and status message
Example:
{
    "status": "Success",
    "total_asset_quantity": 0.07044734061289187     // Maximum of 5 decimal places (0.00001)
}


### Sell asset ------------------------------------------
URL & Method: POST /sell-asset
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
  "asset_quantity": "float",     // Amount to sell in asset quantity (0.01)
  "market": "string"             // "stocks" or "crypto"
  "ticker": "string"             // Ticker symbol with no -USD suffix
  "client_id": "string"          // Client id (or user id for "fa" user type)
}
Response: JSON - Status message
Example:
{
  "status": "Success"
}


### Get asset report ------------------------------------
URL & Method: POST /get-asset-report
Headers:
 - Content-Type: application/json
Body (JSON):
{
  "session_token": "string",
  "market": "string",            // "stocks" or "crypto"
  "client_id": "string"          // Client id (or user id for "fa" user type)
  "ticker_symbol": "string"      // Ticker symbol with no -USD suffix
}
Response: JSON - Asset report and status message
Example:
{
    "profit": -0.006719999999999615,    // Profit in USD over all transactions including past ones already withdrawn
    "status": "Success",
    "total_usd_invested": 10            // USD invested - withdrawn
}
